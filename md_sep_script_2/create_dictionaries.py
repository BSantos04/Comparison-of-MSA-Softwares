import msa_softwares
import SPScore
import overall_score

def create_dictionaries(file, matrix):
    """
    Summary:
       This function determines all the scores for all MSA softwares and creates dictionaries containig these scores.
       
    Parameters:
        file: FASTA file to be aligned by the MSA softwares.
        matrix: Scoring matrix that will auxiliate the SP-Score calculation.
    Returns:
        memories: Dictionary containing the RAM memory used by every MSA software.
        times: Dictionary containig the execution time in seconds of every MSA software.
        sp_scores: Dictionary containing the SP-Score of every alignment generated by every MSA software.
        o_scores: Dictionary containing the overall score for every MSA software based on the previous parameters.
    """
    
    # Creating instances for the classes using the needed parameters
    spscore = SPScore.SPScore(matrix)
    msa = msa_softwares.msa_softwares()
    
    # Run all the MSA softwares
    mafft_info = msa.mafft(file)
    muscle_info = msa.muscle(file)
    tcoffee_info = msa.tcoffee(file)
    clustalo_info = msa.clustalomega(file)
    prank_info = msa.prank(file)
    
    # Get all returned objects from each alignment (aligned file, used memory and execution time)
    mafft_aln, mafft_memory, mafft_time = mafft_info
    muscle_aln, muscle_memory, muscle_time = muscle_info
    tcoffee_aln, tcoffee_memory, tcoffee_time = tcoffee_info
    clustalo_aln, clustalo_memory, clustalo_time = clustalo_info
    prank_aln, prank_memory, prank_time = prank_info
    
    
    # Get a dictionary of each parameter value of every MSA software
    msa_files = {"MAFFT": mafft_aln,
                "MUSCLE": muscle_aln,
                "T-Coffee": tcoffee_aln,
                "ClustalOmega": clustalo_aln,
                "PRANK": prank_aln}
    
    memories = {"MAFFT": mafft_memory,
                "MUSCLE": muscle_memory,
                "T-Coffee": tcoffee_memory,
                "ClustalOmega": clustalo_memory,
                "PRANK": prank_memory}
    
    times = {"MAFFT": mafft_time,
             "MUSCLE": muscle_time,
             "T-Coffee": tcoffee_time,
             "ClustalOmega": clustalo_time,
             "PRANK": prank_time}
    
    sp_scores = {"MAFFT": spscore.sp_score(mafft_aln),
                "MUSCLE": spscore.sp_score(muscle_aln),
                "T-Coffee": spscore.sp_score(tcoffee_aln),
                "ClustalOmega": spscore.sp_score(clustalo_aln), 
                "PRANK": spscore.sp_score(prank_aln)}
    
    o_scores = {"MAFFT": overall_score.overall_score(mafft_info, sp_scores, memories, times),
                "MUSCLE": overall_score.overall_score(muscle_info, sp_scores, memories, times),
                "T-Coffee": overall_score.overall_score(tcoffee_info, sp_scores, memories, times),
                "ClustalOmega": overall_score.overall_score(clustalo_info, sp_scores, memories, times),
                "PRANK": overall_score.overall_score(prank_info, sp_scores, memories, times)}
    
    return msa_files, memories, times, sp_scores, o_scores